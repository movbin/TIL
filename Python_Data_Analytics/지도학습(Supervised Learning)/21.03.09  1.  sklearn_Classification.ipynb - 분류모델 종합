{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"21.03.09  1.  sklearn_Classification.ipynb - 분류모델 종합","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNKopQV6TBI5LPK9Yl/AmYb"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"5OBXZWOFrkE0"},"source":["# sklearn Classification - 분류\r\n","\r\n","# 실습용 데이터 설정\r\n","\r\n","- pandas DataFrame\r\n","   - iris.csv"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E60kWLVUrheo","executionInfo":{"status":"ok","timestamp":1615255344788,"user_tz":-540,"elapsed":2358,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"bdbbd75c-5719-4c0a-83fd-219926e21bf1"},"source":["import seaborn as sns\r\n","df = sns.load_dataset('iris')\r\n","df.info()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 150 entries, 0 to 149\n","Data columns (total 5 columns):\n"," #   Column        Non-Null Count  Dtype  \n","---  ------        --------------  -----  \n"," 0   sepal_length  150 non-null    float64\n"," 1   sepal_width   150 non-null    float64\n"," 2   petal_length  150 non-null    float64\n"," 3   petal_width   150 non-null    float64\n"," 4   species       150 non-null    object \n","dtypes: float64(4), object(1)\n","memory usage: 6.0+ KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":195},"id":"bvjHU7upr1vr","executionInfo":{"status":"ok","timestamp":1615255344789,"user_tz":-540,"elapsed":2147,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"46c67e08-5ba6-4d69-eb9c-56a3d40de203"},"source":["df.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>sepal_length</th>\n","      <th>sepal_width</th>\n","      <th>petal_length</th>\n","      <th>petal_width</th>\n","      <th>species</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>5.1</td>\n","      <td>3.5</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4.9</td>\n","      <td>3.0</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>4.7</td>\n","      <td>3.2</td>\n","      <td>1.3</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.6</td>\n","      <td>3.1</td>\n","      <td>1.5</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5.0</td>\n","      <td>3.6</td>\n","      <td>1.4</td>\n","      <td>0.2</td>\n","      <td>setosa</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   sepal_length  sepal_width  petal_length  petal_width species\n","0           5.1          3.5           1.4          0.2  setosa\n","1           4.9          3.0           1.4          0.2  setosa\n","2           4.7          3.2           1.3          0.2  setosa\n","3           4.6          3.1           1.5          0.2  setosa\n","4           5.0          3.6           1.4          0.2  setosa"]},"metadata":{"tags":[]},"execution_count":2}]},{"cell_type":"markdown","metadata":{"id":"4wCtP2oAuKCi"},"source":["> ## 1) 분석 변수 선택\r\n","\r\n","- X : 'sepal_length', 'sepal_width', 'petal_length', 'petal_width'\r\n","- y : 'species'"]},{"cell_type":"code","metadata":{"id":"p49OoTe5r1yI"},"source":["X = df[['sepal_length','sepal_width', 'petal_length', 'petal_width']]\r\n","y = df['species']"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"MYkSYY4tujrM"},"source":["> ## 2) Train & Test Split(with stratify)\r\n","\r\n","- 7 : 3"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0RTq8w0qr10y","executionInfo":{"status":"ok","timestamp":1615255612291,"user_tz":-540,"elapsed":712,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"0deb7849-9b7b-49a9-ec84-9c5ffb02e9cd"},"source":["from sklearn.model_selection import train_test_split\r\n","X_train, X_test, y_train, y_test = train_test_split(X, y,\r\n","                                                    test_size = 0.3,\r\n","                                                    stratify = y,\r\n","                                                    random_state = 2045)\r\n","print('Train Data : ', X_train.shape, y_train.shape)\r\n","print('Test Data : ', X_test.shape, y_test.shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Train Data :  (105, 4) (105,)\n","Test Data :  (45, 4) (45,)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IXDY9_d3vQpV","executionInfo":{"status":"ok","timestamp":1615255642282,"user_tz":-540,"elapsed":707,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"3c3357fb-bde9-43d7-837c-45c7ef3c64ad"},"source":["df['species'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["versicolor    50\n","virginica     50\n","setosa        50\n","Name: species, dtype: int64"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-b-qlKC4vV8w","executionInfo":{"status":"ok","timestamp":1615255684871,"user_tz":-540,"elapsed":806,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"7e8bd4d1-9739-4a5d-8992-7a05e57f8954"},"source":["print(y_train.value_counts(), '\\n\\n', y_test.value_counts())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["versicolor    35\n","virginica     35\n","setosa        35\n","Name: species, dtype: int64 \n","\n"," virginica     15\n","versicolor    15\n","setosa        15\n","Name: species, dtype: int64\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"O2qDFbhuvLXj"},"source":["# 1. Logistic Regression\r\n","\r\n","> ## 1) 모델 생성\r\n","\r\n","- C : Regularization strength\r\n","   - default : 1.0\r\n","   - 값이 작아지면 weight 값을 0에 가깝게 학습\r\n","      - 다수의 데이터 포인트에 맞추려는 경향\r\n","   - 값이 커지면 weight 값을 제한하지 않음\r\n","      - 각각의 데이터 포인트에 맞추려는 경향"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8cZ-FGvGr13Z","executionInfo":{"status":"ok","timestamp":1615255845672,"user_tz":-540,"elapsed":1446,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"6482bb1a-b72a-4562-d77e-35b47ebcfb92"},"source":["%%time\r\n","from sklearn.linear_model import LogisticRegression\r\n","LR = LogisticRegression(C = 0.3,\r\n","                        penalty = 'l2',\r\n","                        multi_class = 'multinomial',\r\n","                        n_jobs = -1)\r\n","LR.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 39.9 ms, sys: 33.9 ms, total: 73.8 ms\n","Wall time: 993 ms\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"-stowKjewENi"},"source":["> ## 2) 모델 평가"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h0RK71Sgr157","executionInfo":{"status":"ok","timestamp":1615257739724,"user_tz":-540,"elapsed":764,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"f3eb6e08-b497-4a5b-948b-353c8d361fea"},"source":["from sklearn.metrics import accuracy_score, confusion_matrix\r\n","\r\n","LR_ac = accuracy_score(y_test, LR.predict(X_test))\r\n","print(LR_ac, '\\n')\r\n","print(confusion_matrix(y_test, LR.predict(X_test)))"],"execution_count":40,"outputs":[{"output_type":"stream","text":["0.9333333333333333 \n","\n","[[15  0  0]\n"," [ 0 14  1]\n"," [ 0  2 13]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"mGnuNRVswVba"},"source":["# 2. Decision Tree Classifier\r\n","\r\n","> ## 1) 모델 생성"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kWB1zlWer18e","executionInfo":{"status":"ok","timestamp":1615256009204,"user_tz":-540,"elapsed":566,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"bdfca09a-b68f-4f43-9bd6-abfe92729742"},"source":["%%time\r\n","from sklearn.tree import DecisionTreeClassifier\r\n","DT = DecisionTreeClassifier(criterion = 'entropy',\r\n","                            max_depth = 3,\r\n","                            random_state = 2045)\r\n","DT.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='entropy',\n","                       max_depth=3, max_features=None, max_leaf_nodes=None,\n","                       min_impurity_decrease=0.0, min_impurity_split=None,\n","                       min_samples_leaf=1, min_samples_split=2,\n","                       min_weight_fraction_leaf=0.0, presort='deprecated',\n","                       random_state=2045, splitter='best')"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"FdQS-CqVwr9c"},"source":["> ## 2) 모델 평가"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cDId1oxtr1_K","executionInfo":{"status":"ok","timestamp":1615257779070,"user_tz":-540,"elapsed":736,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"94354f03-64b7-4827-a180-47586e34f00f"},"source":["DT_ac = accuracy_score(y_test, DT.predict(X_test))\r\n","\r\n","print(DT_ac, '\\n')\r\n","print(confusion_matrix(y_test, DT.predict(X_test)))"],"execution_count":41,"outputs":[{"output_type":"stream","text":["0.8888888888888888 \n","\n","[[15  0  0]\n"," [ 0 13  2]\n"," [ 0  3 12]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"YOYvwgBhwy-u"},"source":["> ## 3) Feature Importance"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cbSsakhzr2B7","executionInfo":{"status":"ok","timestamp":1615256053453,"user_tz":-540,"elapsed":800,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"e6af9a69-e224-4146-eb95-c2aa88f462d4"},"source":["DT.feature_importances_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.        , 0.        , 0.64899406, 0.35100594])"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"bjZ5KC0Er2El","executionInfo":{"status":"ok","timestamp":1615256105662,"user_tz":-540,"elapsed":849,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"8d1a0acd-e09f-4863-d15c-8ac596841648"},"source":["import matplotlib.pyplot as plt\r\n","plt.figure(figsize = (9, 6))\r\n","sns.barplot(DT.feature_importances_,\r\n","            ['sepal_length','sepal_width', 'petal_length', 'petal_width'])\r\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 648x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"TEVF0xSkxEDU"},"source":["# 3. Random Forest Classifier\r\n","\r\n",">  ## 1) 모델 생성"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9m9poP-Wr2Hb","executionInfo":{"status":"ok","timestamp":1615256233067,"user_tz":-540,"elapsed":816,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"3c95d02d-69ff-4d9c-d6b7-d80b1b805f7c"},"source":["%%time\r\n","from sklearn.ensemble import RandomForestClassifier\r\n","RF = RandomForestClassifier(criterion = 'entropy',\r\n","                            n_estimators = 100,\r\n","                            max_features = 3,\r\n","                            max_depth = 3,\r\n","                            random_state = 2045,\r\n","                            n_jobs = -1)\r\n","RF.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 220 ms, sys: 39.2 ms, total: 259 ms\n","Wall time: 276 ms\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"USKS-9bKxkmH"},"source":["> ## 2) 모델 평가"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fMK-miPdr2KJ","executionInfo":{"status":"ok","timestamp":1615257800095,"user_tz":-540,"elapsed":612,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"08efbc34-79ff-4ab8-afa9-992b26e057ce"},"source":["RF_ac = accuracy_score(y_test, RF.predict(X_test))\r\n","\r\n","print(RF_ac, '\\n')\r\n","print(confusion_matrix(y_test, RF.predict(X_test)))"],"execution_count":42,"outputs":[{"output_type":"stream","text":["0.9333333333333333 \n","\n","[[15  0  0]\n"," [ 0 15  0]\n"," [ 0  3 12]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Tta1RzMPxqZk"},"source":["> ## 3) Feature Importance"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TH6huMRlr2Mh","executionInfo":{"status":"ok","timestamp":1615256276921,"user_tz":-540,"elapsed":802,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"5b5a1779-6601-4044-cbfa-c1fe05db39c3"},"source":["RF.feature_importances_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([1.41185134e-02, 5.56204992e-04, 3.92374938e-01, 5.92950343e-01])"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"94kmMPL9r2PH","executionInfo":{"status":"ok","timestamp":1615256290233,"user_tz":-540,"elapsed":920,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"940d523f-c7f0-4285-9e8b-0e6a57f03fa1"},"source":["import matplotlib.pyplot as plt\r\n","plt.figure(figsize = (9, 6))\r\n","sns.barplot(RF.feature_importances_,\r\n","            ['sepal_length','sepal_width', 'petal_length', 'petal_width'])\r\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 648x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"aChzYuVyxxs4"},"source":["# 4. Gradient Boosting Machine(GBM) Classifier\r\n","\r\n","> ## 1) 모델 생성\r\n","\r\n","- loss : 경사하강법에 사용될 오차함수\r\n","- learning_rate : 반복 학습에 적용될 학습률\r\n","   - 너무 작으면 학습 시간이 오래 걸릴 수 있음\r\n","   - 너무 크면 학습 속도를 빠르지만 최적화 되지 못할 수 있음\r\n","   - n_estimators와 함께 상호보안적으로 사용\r\n","\r\n","- n_estimators : weak learner 개수\r\n","   - 약한 학습기들이 순차적으로 오차를 보정\r\n","   - 많을 수록 학습시간이 길어짐"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"16B_HAwGr2Rp","executionInfo":{"status":"ok","timestamp":1615256496022,"user_tz":-540,"elapsed":1618,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"6dacd372-7ab4-4c0c-f55e-4857bbf53e5c"},"source":["%%time\r\n","from sklearn.ensemble import GradientBoostingClassifier\r\n","GBC = GradientBoostingClassifier(loss = 'deviance',\r\n","                                 n_estimators = 500,\r\n","                                 learning_rate = 0.01,\r\n","                                 max_features = 3,\r\n","                                 max_depth = 3)\r\n","GBC.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 1.01 s, sys: 7.1 ms, total: 1.02 s\n","Wall time: 1.02 s\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"iAKdjuYWylOV"},"source":["> ## 2) 모델 평가"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Wux-PpHZyPID","executionInfo":{"status":"ok","timestamp":1615257827530,"user_tz":-540,"elapsed":765,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"c5661dc3-11f2-4754-cf80-6163313e65c4"},"source":["GBC_ac = accuracy_score(y_test, GBC.predict(X_test))\r\n","\r\n","print(GBC_ac, '\\n')\r\n","print(confusion_matrix(y_test, GBC.predict(X_test)))"],"execution_count":43,"outputs":[{"output_type":"stream","text":["0.9333333333333333 \n","\n","[[15  0  0]\n"," [ 0 15  0]\n"," [ 0  3 12]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"jS2iAiDuytDj"},"source":["> ## 3) Feature Importance"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gkxh7RHxyPKh","executionInfo":{"status":"ok","timestamp":1615256549208,"user_tz":-540,"elapsed":721,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"271319f4-4b7e-4a3c-882c-425d41ff3882"},"source":["GBC.feature_importances_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.02651951, 0.08249231, 0.3387597 , 0.55222848])"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"GAGwUH3-yPOD","executionInfo":{"status":"ok","timestamp":1615256559150,"user_tz":-540,"elapsed":612,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"31092205-3b53-4bc0-bf54-89fb21da3fff"},"source":["import matplotlib.pyplot as plt\r\n","plt.figure(figsize = (9, 6))\r\n","sns.barplot(GBC.feature_importances_,\r\n","            ['sepal_length','sepal_width', 'petal_length', 'petal_width'])\r\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAksAAAFlCAYAAAD786zZAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAWsklEQVR4nO3dfbRldX3f8c9XBgMIghWaoIaMUQsC6ggjahAlrTXa+lCV1qqtnSQtNRIfmmp1tZb4EFOVlRjFpxKLmEpMGqqtwoqEVgEdlTCjCEyAqBSfW4WwEKMg6Ld/3D3mrnHmN+femTuHO7xea7E4Z5999v7eve4a3vz2uXequwMAwPbdY94DAADclYklAIABsQQAMCCWAAAGxBIAwIBYAgAYWDPvAVarQw89tNeuXTvvMQCA3WDz5s03dvdh23tNLC3T2rVrs2nTpnmPAQDsBlX15R295jYcAMCAWAIAGBBLAAADYgkAYEAsAQAMiCUAgAG/OmCZrvnaTTn+FX+wIsfefMYLVuS4AMDSWVkCABgQSwAAA2IJAGBALAEADIglAIABsQQAMCCWAAAGxBIAwIBYAgAYEEsAAANiCQBgQCwBAAyIJQCAAbEEADAglgAABsQSAMCAWAIAGBBLAAADYgkAYEAsAQAMiCUAgAGxBAAwIJYAAAbEEgDAgFgCABgQSwAAA2IJAGBALAEADIglAICBucZSVZ1cVecPXt9QVW9fgfNuqKr7LXp+Q1UdurvPAwCsfnfXlaUNSe63s50AAHYaS1V1r6q6oKo+X1VXV9Vzqur4qrqkqjZX1YVVdfi078VV9daqumLa94Rp+wlV9emq+lxVfaqqjlzqoFV1WFX996q6fPrnxGn7a6rq7Onc11fVSxa95z9W1XVV9cmq+kBVvbyqTkmyPsm505z7T7u/uKo+W1VXVdVRO5jh1KraVFWb7vzerUv9EgCAVWiWlaUnJ/lGdz+iu49N8tEkZyY5pbuPT3J2kjcs2v+A7l6X5EXTa0lybZKTuvuRSU5P8tvLmPWtSd7S3Y9K8uwk71n02lFJfinJCUl+s6r2raqt+z0iyVOyEEjp7vOSbEry/O5e193fn45xY3cfl+RdSV6+vQG6+6zuXt/d69cccNAyvgQAYLVZM8M+VyX5nap6U5Lzk9yc5NgkF1VVkuyT5JuL9v9AknT3pVV176o6JMlBSd5XVQ9J0kn2XcasT0xy9HTOJLl3VR04Pb6gu29PcntVfSvJTyc5Mcn/7O7bktxWVR/ZyfE/OP17c5JnLWM+AGAvtNNY6u6/rKrjkvyDJL+V5GNJtnT3Y3f0lu08f32Sj3f3M6tqbZKLlzHrPZI8ZoqfH5vi6fZFm36Y2SJwW1uPsdz3AwB7oVk+s3S/JN/r7vcnOSPJo5McVlWPnV7ft6qOWfSW50zbH5fklu6+JcnBSb4+vb5hmbP+WZIXL5pr3U7235jkaVW137QC9dRFr92ahdUuAIChWVZQHpbkjKr6UZI7kvxakjuTvK2qDp6O8XtJtkz731ZVn8vCrbZfmba9OQu34V6d5IJlzvqSJO+oqiunc16a5IU72rm7L6+qDye5Msn/y8LtxFuml89J8u6q+n6SHa2QAQCkure9a7YLB6u6OMnLu3vTbjvoLqiqA7v7u1V1QBbi6tTu/uzuOPa9fuaBfdQ/f+3uONRP2HzGC1bkuADA9lXV5u5ev73X9vbP5pxVVUcn2S/J+3ZXKAEAdx+7NZa6++TlvK+qfjnJS7fZvLG7T9vFeZ63K+8HALhLrCx193uTvHfecwAAbOvu+tedAADMRCwBAAyIJQCAAbEEADAglgAABsQSAMCAWAIAGBBLAAADYgkAYEAsAQAMiCUAgAGxBAAwIJYAAAbEEgDAgFgCABgQSwAAA2IJAGBALAEADIglAIABsQQAMCCWAAAGxBIAwIBYAgAYWDPvAVarhz7gvtl0xgvmPQYAsMKsLAEADIglAIABsQQAMCCWAAAGxBIAwIBYAgAYEEsAAANiCQBgQCwBAAyIJQCAAbEEADAglgAABsQSAMCAWAIAGBBLAAADa+Y9wGr1g29uyVde97B5j3GXdMTpV817BADYbawsAQAMiCUAgAGxBAAwIJYAAAbEEgDAgFgCABgQSwAAA2IJAGBALAEADIglAIABsQQAMCCWAAAGxBIAwIBYAgAYEEsAAANiCQBgQCwBAAyIJQCAAbEEADAglgAABsQSAMCAWAIAGBBLAAADYgkAYEAsAQAMiCUAgAGxBAAwIJYAAAbEEgDAwF0qlqrq5Ko6fxfev76q3raD126oqkOr6pCqetHuOicAsHe7S8XSruruTd39kp3sdkiSF+1kHwCAJMuIpaq6V1VdUFWfr6qrq+o5VXV8VV1SVZur6sKqOnza9+KqemtVXTHte8K0/YSq+nRVfa6qPlVVR8547qumlaGqqpuq6gXT9j+oqr+/eJWoqu5bVX9WVVuq6j1JajrMG5M8aJrpjGnbgVV1XlVdW1XnVlX95NkBgLuj5awsPTnJN7r7Ed19bJKPJjkzySndfXySs5O8YdH+B3T3uiys5pw9bbs2yUnd/cgkpyf57RnPvTHJiUmOSXJ9kpOm7Y9N8qlt9v3NJJ/s7mOSfCjJEdP2VyX5Unev6+5XTNsemeRlSY5O8vPTOX5CVZ1aVZuqatNf/fUPZxwZAFjN1izjPVcl+Z2qelOS85PcnOTYJBdNCzL7JPnmov0/kCTdfWlV3buqDklyUJL3VdVDknSSfWc89yeSPD7Jl5O8K8mpVXX/JDd3919vsyD0+CTPms59QVXdPDjun3f315Kkqq5IsjbJJ7fdqbvPSnJWkjz8/vv3jDMDAKvYkleWuvsvkxyXhWj6rSTPTrJlWqlZ190P6+4nLX7LtodI8vokH59Wpp6WZL8ZT39pFlaTTkpycZJvJzklCxG1K25f9PiHWV5EAgB7oeV8Zul+Sb7X3e9PckaSRyc5rKoeO72+b1Uds+gtz5m2Py7JLd19S5KDk3x9en3DrOfu7q8mOTTJQ7r7+iys/rw8CxG1rUuTPG8691OS3GfafmsWVrYAAHZqOSsoD0tyRlX9KMkdSX4tyZ1J3lZVB0/H/L0kW6b9b6uqz2XhVtuvTNvenIXbcK9OcsESz39ZFm71JQsrSv8p27llluS1ST5QVVuy8HmmryRJd99UVRur6uokf7qM8wMAdyPVvXIfvamqi5O8vLs3rdhJ5uTh99+/z//XD573GHdJR5x+1bxHAIAlqarN3b1+e6/tVb9nCQBgd1vRDzJ398nLeV9V/XKSl26zeWN3n7bLQwEALMFd8qe+uvu9Sd477zkAANyGAwAYEEsAAANiCQBgQCwBAAyIJQCAAbEEADAglgAABsQSAMCAWAIAGBBLAAADYgkAYEAsAQAMiCUAgAGxBAAwIJYAAAbEEgDAgFgCABgQSwAAA2IJAGBALAEADIglAIABsQQAMCCWAAAGxBIAwMCaeQ+wWt3z8GNyxOmb5j0GALDCrCwBAAyIJQCAAbEEADAglgAABsQSAMCAWAIAGBBLAAADYgkAYEAsAQAMiCUAgAGxBAAwIJYAAAbEEgDAgFgCABgQSwAAA2vmPcBqde23rs2JZ5447zEAkiQbX7xx3iPAXsvKEgDAgFgCABgQSwAAA2IJAGBALAEADIglAIABsQQAMCCWAAAGxBIAwIBYAgAYEEsAAANiCQBgQCwBAAyIJQCAAbEEADAglgAABsQSAMCAWAIAGBBLAAADYgkAYEAsAQAMiCUAgAGxBAAwIJYAAAbEEgDAgFgCABgQSwAAA2IJAGBALAEADKxILFXVhqq63wz7nVNVpwxev7iq1u/m2Q6pqhcten5yVZ2/O88BAOw9VmplaUOSncbSnByS5EU73QsAIDPGUlWtraprq+rcqrqmqs6rqgOq6viquqSqNlfVhVV1+LRStD7JuVV1RVXtX1WnV9XlVXV1VZ1VVbXUQavqSVX16ar6bFX9SVUdOG2/oapeO22/qqqOmrYfVlUXVdWWqnpPVX25qg5N8sYkD5pmO2M6/IHT17T1a9zufFV1alVtqqpNd3z3jqV+CQDAKrSUlaUjk7yzux+a5DtJTktyZpJTuvv4JGcneUN3n5dkU5Lnd/e67v5+krd396O6+9gk+yd56lKGnCLn1Ume2N3HTcf/jUW73Dhtf1eSl0/bfjPJx7r7mCTnJTli2v6qJF+aZnvFtO2RSV6W5OgkP5/kxO3N0d1ndff67l6/74H7LuVLAABWqTVL2Per3b1xevz+JP8+ybFJLpoWYvZJ8s0dvPcXq+rfJTkgyd9KsiXJR5Zw7sdkIWQ2Tue6Z5JPL3r9g9O/Nyd51vT4cUmemSTd/dGqunlw/D/v7q8lSVVdkWRtkk8uYT4AYC+1lFjqbZ7fmmRLdz929Kaq2i/JO5Os7+6vVtVrkuy3pCmTSnJRdz93B6/fPv37h1na17Tt+3flGADAXmgpt+GOqKqtYfS8JJ9JctjWbVW1b1UdM71+a5KDpsdbw+jG6XNGO/zpt4HPJDmxqh48neteVfV3dvKejUn+ybT/k5LcZzuzAQAMLSWWrktyWlVdk4XwODML4fOmqvp8kiuS/MK07zlJ3j3d0ro9ye8nuTrJhUkuX+qQ3f3tLPyE3Qeq6sos3II7aidve22SJ1XV1Un+cZL/m+TW7r4pC7fzrl70AW8AgO2q7m3vrm1np6q1Sc6fPqC9KlTVTyX5YXffOa1+vau71+2u4x94xIH9iFc8YncdDmCXbHzxxp3vBOxQVW3u7u3+bse9+bM5RyT5b1V1jyQ/SPKv5jwPALAKzRRL3X1DFn7ybUVU1YeSPHCbza/s7guXe8zu/kIWfiUAAMCy3SVWlrr7mfOeAQBge/xFugAAA2IJAGBALAEADIglAIABsQQAMCCWAAAGxBIAwIBYAgAYEEsAAANiCQBgQCwBAAyIJQCAAbEEADAglgAABsQSAMCAWAIAGBBLAAADYgkAYEAsAQAMiCUAgAGxBAAwIJYAAAbEEgDAwJp5D7BaHfW3j8rGF2+c9xgAwAqzsgQAMCCWAAAGxBIAwIBYAgAYEEsAAANiCQBgQCwBAAyIJQCAAbEEADAglgAABsQSAMCAWAIAGBBLAAADYgkAYEAsAQAMrJn3AKvVrdddl0se/4R5jwEAdwtPuPSSuZ3byhIAwIBYAgAYEEsAAANiCQBgQCwBAAyIJQCAAbEEADAglgAABsQSAMCAWAIAGBBLAAADYgkAYEAsAQAMiCUAgAGxBAAwIJYAAAbEEgDAgFgCABgQSwAAA2IJAGBALAEADIglAIABsQQAMCCWAAAGxBIAwIBYAgAYEEsAAANiCQBgQCwBAAzssViqqg1Vdb8Z9junqk7ZhfO8rqqeuJ3tJ1fV+Yse/8LuOicAsPdaswfPtSHJ1Um+sZIn6e7TZ9jt5CTfTfKplZwFAFj9lr2yVFVrq+raqjq3qq6pqvOq6oCqOr6qLqmqzVV1YVUdPq3arE9yblVdUVX7V9XpVXV5VV1dVWdVVc1wzkdV1Qenx8+oqu9X1T2rar+qun7a/uNVoqp68jTjZ5M8a+vcSV6Y5N9Ms5w0Hf7xVfWpqrreKhMAsNWu3oY7Msk7u/uhSb6T5LQkZyY5pbuPT3J2kjd093lJNiV5fnev6+7vJ3l7dz+qu49Nsn+Sp85wvs8lWTc9PikLK1WPSvLoJJct3rGq9kvy+0meluT4JD+TJN19Q5J3J3nLNMsnprccnuRx0xxv3N7Jq+rUqtpUVZtuueOOGcYFAFa7XY2lr3b3xunx+5P8UpJjk1xUVVckeXWSB+zgvb9YVZdV1VVJ/m6SY3Z2su6+M8mXquqhSU5I8rtJHp+FcPrENrsfleT/dPcXurun+Ub+R3f/qLv/IslP7+D8Z3X3+u5ef/C+++5sXABgL7Crn1nqbZ7fmmRLdz929KZp1eedSdZ391er6jVJ9pvxnJcmeUqSO5L8ryTnJNknyStmH3u7bl884i4eCwDYS+zqytIRVbU1jJ6X5DNJDtu6rar2raqtK0a3Jjloerw1jG6sqgOTLOUzQp9I8rIkn+7ubye5bxZuB169zX7XJllbVQ+anj930WuLZwEA2KFdjaXrkpxWVdckuU+mzysleVNVfT7JFUm2/oj+OUnePd2euz0Lnye6OsmFSS5fwjkvy8Jtskun51cmuWq61fZj3X1bklOTXDB9wPtbi17+SJJnbvMBbwCAn1DbNMbsb1z4qbLzpw9o3+0cedBBfdYjj5v3GABwt/CESy9Z0eNX1ebuXr+91/wGbwCAgWV/wHv6EfwVW1Wqqg8leeA2m1/Z3Reu1DkBALa1J3+D95J09zPnPQMAgNtwAAADYgkAYEAsAQAMiCUAgAGxBAAwIJYAAAbEEgDAgFgCABgQSwAAA2IJAGBALAEADIglAIABsQQAMCCWAAAGxBIAwIBYAgAYEEsAAANiCQBgQCwBAAyIJQCAAbEEADAglgAABsQSAMCAWAIAGFgz7wFWq4OOPDJPuPSSeY8BAKwwK0sAAANiCQBgQCwBAAyIJQCAAbEEADAglgAABsQSAMBAdfe8Z1iVqurWJNfNe4690KFJbpz3EHsp13bluLYrw3VdOa7tT/q57j5sey/4pZTLd113r5/3EHubqtrkuq4M13bluLYrw3VdOa7t0rgNBwAwIJYAAAbE0vKdNe8B9lKu68pxbVeOa7syXNeV49ougQ94AwAMWFkCABgQSztRVU+uquuq6otV9artvP5TVfXH0+uXVdXaPT/l6jPDdX18VX22qu6sqlPmMeNqNcO1/Y2q+ouqurKq/ndV/dw85lxtZriuL6yqq6rqiqr6ZFUdPY85V6OdXdtF+z27qrqq/BTXjGb4vt1QVd+evm+vqKp/OY857+rE0kBV7ZPkHUmekuToJM/dzh+Av5rk5u5+cJK3JHnTnp1y9Znxun4lyYYkf7hnp1vdZry2n0uyvrsfnuS8JG/es1OuPjNe1z/s7od197osXNPf3cNjrkozXttU1UFJXprksj074eo167VN8sfdvW765z17dMhVQiyNnZDki919fXf/IMkfJXnGNvs8I8n7psfnJfl7VVV7cMbVaKfXtbtv6O4rk/xoHgOuYrNc24939/emp59J8oA9PONqNMt1/c6ip/dK4gOhs5nlz9kkeX0W/mf0tj053Co367VlJ8TS2P2TfHXR869N27a7T3ffmeSWJPfdI9OtXrNcV5Znqdf2V5P86YpOtHeY6bpW1WlV9aUsrCy9ZA/Nttrt9NpW1XFJfra7L9iTg+0FZv3z4NnTbfnzqupn98xoq4tYgrupqvpnSdYnOWPes+wtuvsd3f2gJK9M8up5z7M3qKp7ZOGW5r+d9yx7qY8kWTvdlr8of3OnhEXE0tjXkyyu7AdM27a7T1WtSXJwkpv2yHSr1yzXleWZ6dpW1ROT/IckT+/u2/fQbKvZUr9n/yjJP1rRifYeO7u2ByU5NsnFVXVDksck+bAPec9kp9+33X3Toj8D3pPk+D0026oilsYuT/KQqnpgVd0zyT9N8uFt9vlwkn8xPT4lycfaL6/amVmuK8uz02tbVY9M8p+zEErfmsOMq9Es1/Uhi57+wyRf2IPzrWbDa9vdt3T3od29trvXZuFzdk/v7k3zGXdVmeX79vBFT5+e5Jo9ON+q4S/SHejuO6vq15NcmGSfJGd395aqel2STd394ST/Jcl/raovJvmrLHwzMjDLda2qRyX5UJL7JHlaVb22u4+Z49irwozfs2ckOTDJn0w/i/CV7n763IZeBWa8rr8+rdjdkeTm/M3/RDEw47VlGWa8ti+pqqcnuTML/w3bMLeB78L8Bm8AgAG34QAABsQSAMCAWAIAGBBLAAADYgkAYEAsAQAMiCUAgAGxBAAw8P8BL9JetKUeJEUAAAAASUVORK5CYII=\n","text/plain":["<Figure size 648x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"RyE-L6Rty-Js"},"source":["# 5. Adaptive Boosting Classfier\r\n","\r\n",">  ## 1) 모델 생성"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"De5N-YY2yPQq","executionInfo":{"status":"ok","timestamp":1615256677799,"user_tz":-540,"elapsed":1960,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"bd2606f2-ae8f-4204-da86-47c3ad6d0704"},"source":["%%time\r\n","from sklearn.ensemble import AdaBoostClassifier\r\n","ABC = AdaBoostClassifier(\r\n","                        n_estimators = 1000,\r\n","                        learning_rate = 0.001,\r\n","                        random_state = 2045)\r\n","ABC.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 1.46 s, sys: 8.23 ms, total: 1.47 s\n","Wall time: 1.47 s\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"s482XxnhzSQs"},"source":["> ## 2) 모델 평가"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2eNDqc73yPTj","executionInfo":{"status":"ok","timestamp":1615257849746,"user_tz":-540,"elapsed":848,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"6642cb75-6fc1-4bbf-b6e3-35b3cfba2353"},"source":["ABC_ac = accuracy_score(y_test, ABC.predict(X_test))\r\n","\r\n","print(ABC_ac, '\\n')\r\n","print(confusion_matrix(y_test, ABC.predict(X_test)))"],"execution_count":44,"outputs":[{"output_type":"stream","text":["0.8888888888888888 \n","\n","[[15  0  0]\n"," [ 0 13  2]\n"," [ 0  3 12]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"jx7FOlnYzXB6"},"source":["> ## 3) Feature Importance"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8tbP1vFYyPWe","executionInfo":{"status":"ok","timestamp":1615256722347,"user_tz":-540,"elapsed":588,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"7e2525f1-ebe4-4694-e652-54672614bd6e"},"source":["ABC.feature_importances_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.   , 0.   , 0.137, 0.863])"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"_cApzZVwyPZb","executionInfo":{"status":"ok","timestamp":1615256730819,"user_tz":-540,"elapsed":608,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"1a18a584-7088-47f4-e903-eff6fe297c63"},"source":["import matplotlib.pyplot as plt\r\n","plt.figure(figsize = (9, 6))\r\n","sns.barplot(ABC.feature_importances_,\r\n","            ['sepal_length','sepal_width', 'petal_length', 'petal_width'])\r\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 648x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"zWkG95xEzdBh"},"source":["# 6. eXtra Gradient Boost(XGBoost) Classifier \r\n","\r\n","> ## 1) 모델 생성\r\n","\r\n","- booster : 'gbtree' or 'gblinear'\r\n","- reg_lambda : L2 Regularization"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e2UXEe5ryPcH","executionInfo":{"status":"ok","timestamp":1615256832051,"user_tz":-540,"elapsed":729,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"30c4cdbe-8978-4f12-8405-2cd8ae9c4c54"},"source":["%%time\r\n","from xgboost import XGBClassifier\r\n","XGB = XGBClassifier(booster = 'gbtree',\r\n","                   n_estimators = 500,\r\n","                   learning_rate = 0.5,\r\n","                   reg_lambda = 0.05,\r\n","                   n_jobs = -1)\r\n","XGB.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 122 ms, sys: 23.3 ms, total: 146 ms\n","Wall time: 172 ms\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"4v6V3LVpz2al"},"source":["> ## 2) 모델 평가"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I8yprueHz5qJ","executionInfo":{"status":"ok","timestamp":1615257874066,"user_tz":-540,"elapsed":751,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"095ef729-76c1-49a4-ba36-359041524b57"},"source":["XGB_ac = accuracy_score(y_test, XGB.predict(X_test))\r\n","\r\n","print(XGB_ac, '\\n')\r\n","print(confusion_matrix(y_test, XGB.predict(X_test)))"],"execution_count":45,"outputs":[{"output_type":"stream","text":["0.9111111111111111 \n","\n","[[15  0  0]\n"," [ 0 15  0]\n"," [ 0  4 11]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"6XGB-pQYz3Gk"},"source":["> ## 3) Feature Importance"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j145YvkGyPfP","executionInfo":{"status":"ok","timestamp":1615256879795,"user_tz":-540,"elapsed":728,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"726b1af1-9fdf-4aa7-da75-cf2fe36aaf08"},"source":["XGB.feature_importances_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.00226077, 0.43800136, 0.12052245, 0.4392154 ], dtype=float32)"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"ef0Sm-bor2Ua","executionInfo":{"status":"ok","timestamp":1615256890239,"user_tz":-540,"elapsed":713,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"894fe9e9-fab3-4929-94bf-3418d4813d45"},"source":["import matplotlib.pyplot as plt\r\n","plt.figure(figsize = (9, 6))\r\n","sns.barplot(XGB.feature_importances_,\r\n","            ['sepal_length','sepal_width', 'petal_length', 'petal_width'])\r\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 648x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"6g5f8msv0FDu"},"source":["# 7. LightGBM Classifier\r\n","\r\n","> ## 1) 모델 생성"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hcD4_rRy0EKC","executionInfo":{"status":"ok","timestamp":1615256957429,"user_tz":-540,"elapsed":874,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"a85d5b60-91e7-4cdd-a5fe-4b864ff247f9"},"source":["%%time\r\n","from lightgbm import LGBMClassifier\r\n","LGB = LGBMClassifier(\r\n","                    n_estimators = 500,\r\n","                    learning_rate = 0.5,\r\n","                    max_depth = 3, \r\n","                    n_jobs = -1)\r\n","LGB.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 147 ms, sys: 19 ms, total: 166 ms\n","Wall time: 99.7 ms\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"kUzpGsQT0U-s"},"source":["> ## 2) 모델 평가"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JYzx44Oy0Ef8","executionInfo":{"status":"ok","timestamp":1615257892589,"user_tz":-540,"elapsed":599,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"2675122c-b3fb-47f9-8e70-b93474735458"},"source":["LGB_ac = accuracy_score(y_test, LGB.predict(X_test))\r\n","\r\n","print(LGB_ac, '\\n')\r\n","print(confusion_matrix(y_test, LGB.predict(X_test)))"],"execution_count":46,"outputs":[{"output_type":"stream","text":["0.9333333333333333 \n","\n","[[15  0  0]\n"," [ 0 15  0]\n"," [ 0  3 12]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"pmOZ-GOG0axs"},"source":["> ## 3) Feature Importance"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X62cr1CB0EiF","executionInfo":{"status":"ok","timestamp":1615257001830,"user_tz":-540,"elapsed":579,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"6a8cc5bc-9792-4b54-a186-9f15e2da676a"},"source":["LGB.feature_importances_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([842, 168, 379, 416])"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"u1wwTpZT0Eks","executionInfo":{"status":"ok","timestamp":1615257015324,"user_tz":-540,"elapsed":752,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"7bd199e4-c071-408e-e3ee-b9961bbc5288"},"source":["import matplotlib.pyplot as plt\r\n","plt.figure(figsize = (9, 6))\r\n","sns.barplot(LGB.feature_importances_,\r\n","            ['sepal_length','sepal_width', 'petal_length', 'petal_width'])\r\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 648x432 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"SDiT0QB30iaz"},"source":["# 8. K-Nearest Neighbors Classifier\r\n","\r\n",">  ## 1) 모델 생성"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6zdCXMA50EnS","executionInfo":{"status":"ok","timestamp":1615257147931,"user_tz":-540,"elapsed":580,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"5b4b9e7f-a87f-4fd1-8019-bf74d73d1c67"},"source":["%%time\r\n","from sklearn.neighbors import KNeighborsClassifier\r\n","KNN = KNeighborsClassifier(n_neighbors = 5,\r\n","                            n_jobs = -1)\r\n","KNN.fit(X_train, y_train)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["CPU times: user 4.01 ms, sys: 990 µs, total: 5 ms\n","Wall time: 9.1 ms\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"gmgBboeJ1Coi"},"source":["> ## 2) 모델 평가"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u27mFra_0Epy","executionInfo":{"status":"ok","timestamp":1615257923202,"user_tz":-540,"elapsed":805,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"b1cd2bb2-6061-4c4a-9d26-18643b9d79e4"},"source":["KNN_ac = accuracy_score(y_test, KNN.predict(X_test))\r\n","\r\n","print(KNN_ac, '\\n')\r\n","print(confusion_matrix(y_test, KNN.predict(X_test)))"],"execution_count":47,"outputs":[{"output_type":"stream","text":["0.9777777777777777 \n","\n","[[15  0  0]\n"," [ 0 15  0]\n"," [ 0  1 14]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":254},"id":"zL2brES53_em","executionInfo":{"status":"ok","timestamp":1615258167800,"user_tz":-540,"elapsed":711,"user":{"displayName":"김혜빈","photoUrl":"","userId":"10040074935049254379"}},"outputId":"186e8dc3-53db-4056-e477-697c76b7e33c"},"source":["import pandas as pd\r\n","df_result = pd.DataFrame({\"Model\" : ['LR', 'RF', 'GBC', 'ABC', 'XGB', 'LGB', 'KNN'],\r\n","                          \"Accuracy\" : [LR_ac, RF_ac, GBC_ac, ABC_ac, XGB_ac, LGB_ac, KNN_ac]})\r\n","                          \r\n","df_result.sort_values(by=['Accuracy'], axis=0, ascending=False)\r\n","# 보통은 KNN 정확도가 떨어지게 나오는데, 예제가 너무 쉬워서 잘 나왔다고 함"],"execution_count":51,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Model</th>\n","      <th>Accuracy</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>KNN</td>\n","      <td>0.977778</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>LR</td>\n","      <td>0.933333</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>RF</td>\n","      <td>0.933333</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>GBC</td>\n","      <td>0.933333</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>LGB</td>\n","      <td>0.933333</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>XGB</td>\n","      <td>0.911111</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>ABC</td>\n","      <td>0.888889</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  Model  Accuracy\n","6   KNN  0.977778\n","0    LR  0.933333\n","1    RF  0.933333\n","2   GBC  0.933333\n","5   LGB  0.933333\n","4   XGB  0.911111\n","3   ABC  0.888889"]},"metadata":{"tags":[]},"execution_count":51}]},{"cell_type":"markdown","metadata":{"id":"2Hcn4kiv1L3x"},"source":["### \r\n","# The End\r\n","###"]}]}